package com.example.levin.mockia2;

import android.content.Context;
import android.util.Log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.Buffer;
import java.util.ArrayList;

public class StorageUtility {

    private Context appContext;

    private static final String SKILLS_PROGRESS_FILE_NAME = "skillsProgress.txt";
    private FileInputStream skillsProgressFIS;
    private FileOutputStream skillsProgressFOS;
    public ArrayList<String> skillsProgressStringArray = new ArrayList<>();

    private static final String DONE_TASKS_FILE_NAME = "doneTasks.txt";
    private FileInputStream doneTasksFIS; //just lists whether or not a task has been done before
    private FileOutputStream doneTasksFOS;
    public ArrayList<String> doneTasksStringArray = new ArrayList<>();

    private static final String SONG_SKILLS_FILE_NAME = "songSkills.txt";
    private FileInputStream songSkillsFIS;
    private FileOutputStream songSkillsFOS;
    public ArrayList<String> songSkillsStringArray = new ArrayList<>();

    /*
    GENERAL WORKINGS:
    On construction, read the files to string arrays. Then work only with those arrays, and write
    those arrays back to the files. This is because arrays are easier to work with (you can print
    them out etc).
    */

    public StorageUtility(Context c) throws IOException {
        appContext = c;

        File skillsProgressFile = new File(appContext.getFilesDir(), SKILLS_PROGRESS_FILE_NAME);
        if (!skillsProgressFile.exists()) {
            Log.d("myInfoTag", "creating skills progress file anew");
            skillsProgressFile.createNewFile();
        }
        else
            Log.d("myInfoTag", "skills progress file already exists; not created anew.");
        skillsProgressFIS = appContext.openFileInput(SKILLS_PROGRESS_FILE_NAME);
        skillsProgressFOS = appContext.openFileOutput(SKILLS_PROGRESS_FILE_NAME, Context.MODE_PRIVATE);
        loadSkillsProgressStringArray();


        File doneTasksFile = new File(appContext.getFilesDir(), DONE_TASKS_FILE_NAME);
        if (!doneTasksFile.exists()) {
            doneTasksFile.createNewFile();
        }
        doneTasksFIS = appContext.openFileInput(DONE_TASKS_FILE_NAME);
        doneTasksFOS = appContext.openFileOutput(DONE_TASKS_FILE_NAME, Context.MODE_PRIVATE);
        loadDoneTasksStringArray();

        File songSkillsFile = new File(appContext.getFilesDir(), SONG_SKILLS_FILE_NAME);
        if (!songSkillsFile.exists()) {
            songSkillsFile.createNewFile();
        }
        songSkillsFIS = appContext.openFileInput(SONG_SKILLS_FILE_NAME);
        songSkillsFOS = appContext.openFileOutput(SONG_SKILLS_FILE_NAME, Context.MODE_PRIVATE);
        loadSongSkillsStringArray();
    }

    public void loadSkillsProgressStringArray() throws IOException {
        BufferedReader bReader = new BufferedReader(new InputStreamReader(skillsProgressFIS));

        String line;
        while ((line = bReader.readLine()) != null) {
            Log.d("myInfoTag", "line: " + line);
            skillsProgressStringArray.add(line);
        }
        Log.d("myInfoTag", "load completed.");
    }

    public void loadDoneTasksStringArray() throws IOException {
        BufferedReader bReader = new BufferedReader(new InputStreamReader(doneTasksFIS));

        String line;
        while ((line = bReader.readLine()) != null) {
            doneTasksStringArray.add(line);
        }

    }

    public void loadSongSkillsStringArray() throws IOException {
        BufferedReader bReader = new BufferedReader(new InputStreamReader(songSkillsFIS));

        String line;
        while ((line = bReader.readLine()) != null) {
            songSkillsStringArray.add(line);
        }
    }

    public void saveSkillsProgressStringArray() throws IOException {
        String skillsProgressString = null;

        for (String line : skillsProgressStringArray) {
            if (skillsProgressString == null)
                skillsProgressString = line;
            else
                skillsProgressString = skillsProgressString + "\n" + line;
        }

        Log.d("myInfoTag", "stringSaving: " + skillsProgressString);

        skillsProgressFOS.write(skillsProgressString.getBytes());
    }

    public void saveDoneTasksStringArray() throws IOException {
        String skillsProgressString = null;

        for (String line : doneTasksStringArray) {
            if (skillsProgressString == null)
                skillsProgressString = line;
            else
                skillsProgressString = skillsProgressString + "\n" + line;
        }

        doneTasksFOS.write(skillsProgressString.getBytes());
    }

    public void saveSongSkillsArray() throws IOException {
        String songSkillsString = null;

        for (String line : songSkillsStringArray) {
            if (songSkillsString == null)
                songSkillsString = line;
            else
                songSkillsString = songSkillsString + "\n" + line;
        }

        songSkillsFOS.write(songSkillsString.getBytes());
    }


    public void setSongSkillsMatrix(ArrayList<ArrayList<String>> songAndSkillsMatrix) throws IOException {
        songSkillsStringArray.clear();

        for (ArrayList<String> skillLine : songAndSkillsMatrix) {
            songSkillsStringArray.add(skillLine.toString());
        }

        Log.d("myInfoTag", "updated songSkillsStringArray: " + songSkillsStringArray);
        saveSongSkillsArray();
        /*
        //TEST:
        songSkillsStringArray.clear();
        loadSongSkillsStringArray();
        Log.d("myInfoTag", "test load songSkillsStringArray: " + songSkillsStringArray);
        */
    }

    public ArrayList<String> getSongSkillsStringArray() {
        return songSkillsStringArray;
    }

    public ArrayList<ArrayList<String>> getFormattedSongSkillsMatrix() {
        ArrayList<ArrayList<String>> formattedSongSkillsMatrix = new ArrayList<>();

        for (String skillLine : songSkillsStringArray) {
            ArrayList<String> skillLineArray = new ArrayList<>();
            String currentItem = "";
            for (int index = 0; index < skillLine.length(); index++) {
                char charAtIndex = skillLine.charAt(index);
                if (Character.isAlphabetic(charAtIndex) || Character.isDigit(charAtIndex)) {
                    currentItem = currentItem + Character.toString(charAtIndex);
                }
                else
                {
                    if (!currentItem.equals("")) {
                        skillLineArray.add(currentItem);
                        currentItem = "";
                    }
                }
            }
            formattedSongSkillsMatrix.add(skillLineArray);
        }

        return formattedSongSkillsMatrix;
    }


    public void updateSkillProgress(String skillId, int value) throws IOException {
        int skillIndex = -1;
        for (int index = 0; index < skillsProgressStringArray.size(); index++) {
            if (skillsProgressStringArray.get(index).equals("{" + skillId)) {
                skillIndex = index;
                break;
            }
        }

        if (skillIndex != -1) {
            int updatedProgress = Integer.parseInt(skillsProgressStringArray.get(skillIndex + 1));
            updatedProgress += value;
            skillsProgressStringArray.set(skillIndex + 1, Integer.toString(updatedProgress));
        }
        else {
            skillsProgressStringArray.add("{" + skillId);
            skillsProgressStringArray.add(Integer.toString(value));
        }

        saveSkillsProgressStringArray();
    }

    public void updateSkillProgress(String skillId) throws IOException {
        updateSkillProgress(skillId, 10);
    }

    public int getSkillProgress(String skillId) {
        int skillIndex = -1;
        for (int index = 0; index < skillsProgressStringArray.size(); index++) {
            if (skillsProgressStringArray.get(index).equals("{" + skillId)) {
                skillIndex = index;
                break;
            }
        }

        if (skillIndex != -1) {
            return Integer.parseInt(skillsProgressStringArray.get(skillIndex + 1));
        }
        else {
            return 0;
        }
    }


    public void addTaskAsDone(String taskId) throws IOException {
        if (!isTaskDone(taskId))
            doneTasksStringArray.add("{" + taskId);
        saveDoneTasksStringArray();
    }

    public boolean isTaskDone(String taskId) {
        boolean taskFound = false;
        for (int index = 0; index < doneTasksStringArray.size(); index++) {
            if (doneTasksStringArray.get(index).equals("{" + taskId)) {
                taskFound = true;
                break;
            }
        }

        return taskFound;
    }
}
