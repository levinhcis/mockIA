package com.example.levin.mockia2;

import android.content.Context;
import android.util.Log;

import com.example.levin.mockia2.R;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.util.ArrayList;

public class FileUtility {
    Context appContext;
    InputStream skillsIS;

    InputStream tasksIS;

    InputStream songsIS;

    FileInputStream progressFIS;
    FileOutputStream progressFOS;

    public FileUtility(Context c) throws FileNotFoundException {
        appContext = c;
        skillsIS = appContext.getResources().openRawResource(R.raw.skills);
        tasksIS = appContext.getResources().openRawResource(R.raw.tasks);
        songsIS = appContext.getResources().openRawResource(R.raw.songs);

        //progressFIS = appContext.openFileInput("progress.txt");
        //progressFOS= appContext.openFileOutput("progress.txt", Context.MODE_APPEND);
    }

    //Get the whole chunk of string for a data object
    //id format: e.g S000012 - the object type letter, then the number.
    public String getObjectString(String id) throws IOException {

        InputStream inputStream;

        if (id.substring(0, 1).equals("S"))
            inputStream = skillsIS;
        else if (id.substring(0, 1).equals("T"))
            inputStream = tasksIS;
        else if (id.substring(0, 1).equals("P"))
            inputStream = songsIS;
        else {
            Log.e("myErrorTag", "Invalid data object type!");
            throw new FileNotFoundException();
        }

        BufferedReader bReader = new BufferedReader(new InputStreamReader(inputStream));

        String lineToFind = "{" + id;
        String line;
        String result = "";
        boolean lineFound = false;
        while ((line = bReader.readLine()) != null) {
            if (line.equals(lineToFind)) {
                lineFound = true;
            }
            else if (line.equals("}") && lineFound) {
                break;
            }

            if (lineFound) {
                result = result + line + "\n";
            }
        }
        //Log.d("myInfoTag", "RESULT: " + result);
        inputStream.reset(); //SUPER IMPORTANT!!!
        return result;
    }

    public ArrayList<String> getObjectContentsArray(String id) throws IOException {
        String skillString = getObjectString(id);
        if (skillString.equals(""))
            return null;

        BufferedReader strReader = new BufferedReader(new StringReader(skillString));

        String line;
        String currentContents = "";
        ArrayList<String> contents = new ArrayList<>();
        boolean contentsFound = false;

        contents.add(id);

        strReader.readLine(); strReader.readLine();

        while ((line = strReader.readLine()) != null) {
            if (line.substring(0, 1).equals("-")){
                contents.add(currentContents);
                currentContents = "";
            }
            else {
                if (currentContents.equals(""))
                    currentContents = line;
                else
                    currentContents = currentContents + "\n" + line;
            }
        }
        contents.add(currentContents);

        //Log.d("myInfoTag", "id: " + contents.get(0) + ", tasks: " + contents.get(3));
        return contents;
    }

    public ArrayList<String> getAllIDs(String type) throws IOException {
        InputStream inputStream;

        if (type.equals("skills"))
            inputStream = skillsIS;
        else if (type.equals("tasks"))
            inputStream = tasksIS;
        else if (type.equals("songs"))
            inputStream = songsIS;
        else {
            Log.e("myErrorTag", "Invalid data object type!");
            throw new java.io.FileNotFoundException();
        }

        //collect all ids
        BufferedReader bReader = new BufferedReader(new InputStreamReader(inputStream));

        ArrayList<String> allIds = new ArrayList<>();

        String line;

        while ((line = bReader.readLine()) != null) {
            if ((line.length() > 0) && (line.substring(0, 1).equals("{")))
                allIds.add(line.substring(1));
        }

        //reset
        inputStream.reset();

        return allIds;
    }

    public SkillNode getSkillNode(String id) throws IOException {
        ArrayList<String> skillContents = getObjectContentsArray(id);
        if (skillContents == null)
            return null;

        BufferedReader strReader = new BufferedReader(new StringReader(skillContents.get(3)));
        ArrayList<String> tasks = new ArrayList<>();

        //Log.d("myInfoTag", "in getSkillNode. id: " + id + ", skillContents.get(3): " + skillContents.get(3));

        String line = null;
        while ((line = strReader.readLine()) != null) {
            //Log.d("myInfoTag", "task line length: " + line.length());
            //Log.d("myInfoTag", "task line: " + line);
            tasks.add(line.substring(0, 7));
        }

        String prevSkillId = skillContents.get(4);
        if (!prevSkillId.equals("")) {
            prevSkillId = prevSkillId.substring(0, 7);
        }

        SkillNode skill = new SkillNode(
                id,
                skillContents.get(1),
                skillContents.get(2),
                tasks,
                prevSkillId,
                Integer.parseInt(skillContents.get(5))
        );

        return skill;
    }

    public ArrayList<SkillNode> getAllSkillNodes() throws IOException {
        ArrayList<SkillNode> allSkillNodes = new ArrayList<>();

        ArrayList<String> allSkillIds = getAllIDs("skills");

        for (String id : allSkillIds) {
            allSkillNodes.add(getSkillNode(id));
        }

        return allSkillNodes;
    }

    public Song getSong(String id) throws IOException {
        ArrayList<String> songContents = getObjectContentsArray(id);
        if (songContents == null)
            return null;

        BufferedReader strReader = new BufferedReader(new StringReader(songContents.get(2)));
        ArrayList<String> genres = new ArrayList<>();

        //Log.d("myInfoTag", "in getSkillNode. id: " + id + ", skillContents.get(3): " + skillContents.get(3));

        String line = null;
        while ((line = strReader.readLine()) != null) {
            genres.add(line);
        }

        strReader = new BufferedReader(new StringReader(songContents.get(3)));
        ArrayList<String> topSkillIds = new ArrayList<>();

        while ((line = strReader.readLine()) != null) {
            topSkillIds.add(line.substring(0, 7));
        }

        Song song = new Song(
                songContents.get(0),
                songContents.get(1),
                genres,
                topSkillIds
        );

        return song;
    }

    public ArrayList<Song> getAllSongs() throws IOException {
        ArrayList<Song> allSongs = new ArrayList<>();

        ArrayList<String> allSongIds = getAllIDs("songs");

        for (String id : allSongIds) {
            allSongs.add(getSong(id));
        }

        return allSongs;
    }

    //public ArrayList<String>



    //getTaskObject

    //getSongObject
}
